// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for authentication
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String? // For credentials-based login
  image         String?
  accounts      Account[]
  sessions      Session[]

  // User's data
  projects           Project[]
  dailyTaskTemplates DailyTaskTemplate[]
  weeklyTasks        WeeklyTask[]
}

// Models for NextAuth.js
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// --- SAMER'S DASHBOARD MODELS ---

model Project {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  title       String
  description String?
  isArchived  Boolean  @default(false) // For soft deletion
  isDone      Boolean  @default(false)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  subtasks Subtask[]
}

model Subtask {
  id          String   @id @default(cuid())
  text        String
  isCompleted Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade) // Cascading delete
}

// The "template" for a daily task, created once by the user.
model DailyTaskTemplate {
  id         String   @id @default(cuid())
  title      String
  createdAt  DateTime @default(now())
  isArchived Boolean  @default(false) // NEW FIELD FOR ARCHIVING

  userId String
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // A template has many completions over time
  completions DailyTaskCompletion[]
}

// A record of a specific completion on a specific day.
// This is the key to historical tracking.
model DailyTaskCompletion {
  id         String   @id @default(cuid())
  date       DateTime @db.Date // Store only the date part
  templateId String
  template   DailyTaskTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@unique([date, templateId]) // A user can only complete a task once per day
}

model WeeklyTask {
  id         String   @id @default(cuid())
  title      String
  createdAt  DateTime @default(now())
  isArchived Boolean  @default(false) // NEW FIELD FOR ARCHIVING

  userId String
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  completions WeeklyTaskCompletion[]
}

model WeeklyTaskCompletion {
  id           String     @id @default(cuid())
  weeklyTaskId String
  weeklyTask   WeeklyTask @relation(fields: [weeklyTaskId], references: [id], onDelete: Cascade)
  completedAt  DateTime   @default(now())

  @@unique([weeklyTaskId, completedAt]) // A weekly task can only be completed once at a specific time
}